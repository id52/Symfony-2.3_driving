<?php

namespace My\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * DrivingConditionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DrivingConditionsRepository extends EntityRepository
{
    public function getAvalableConditions(
        $primary = null,
        $category = null,
        $with_at = null,
        $user = null,
        $id = null
    ) {
        $currentTime = new \DateTime();
        $findDateTime = $currentTime->sub(new \DateInterval('PT2H'));

        $qb = $this->createQueryBuilder('dc')
            ->andWhere('dc.active = :active')->setParameter('active', true)
            ->leftJoin(
                'dc.packages',
                'cp',
                'WITH',
                '(cp.rezerv_at IS NULL OR cp.rezerv_at <= :time OR (cp.rezerv_at > :time AND cp.user = :user)) 
                AND cp.sale_at IS NULL'
            )
            ->andHaving('COUNT(cp.condition) > 0')
            ->setParameter('time', $findDateTime)
            ->setParameter('user', $user)
            ->groupBy('dc');

        if ($id !== null) {
            $qb->andWhere('dc.id = :id')->setParameter('id', $id);
        }
        if ($primary !== null) {
            $qb->andWhere('dc.is_primary = :primary')->setParameter('primary', $primary);
        }
        if ($category !== null) {
            $qb ->leftJoin('dc.region_prices', 'rp')
                ->andWhere('rp.active = :act')->setParameter('act', true)
                ->andWhere('rp.category = :cat_id')->setParameter('cat_id', $category);
        }
        if ($with_at !== null) {
            $qb->andWhere('dc.with_at = :with_at')->setParameter('with_at', $with_at);
        }

        return $qb->getQuery()->execute();
    }
}
